{
  "stats": {
    "suites": 3,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-28T19:46:36.576Z",
    "end": "2020-04-28T19:46:41.028Z",
    "duration": 4452,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ba017ec4-afd9-406a-9eec-238474f2a06c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "97f27a07-1885-4325-95f6-a0b776b4b1af",
          "title": "Movies API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testMoviesApi.js",
          "file": "/tests/testMoviesApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Movies API test \"before all\" hook",
              "timedOut": false,
              "duration": 499,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n_userModel2.default.create(testUser).then(function (result) {\n  return done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "bd1b1e83-0dcb-4544-9912-d83c1029032f",
              "parentUUID": "97f27a07-1885-4325-95f6-a0b776b4b1af",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Movies",
              "fullTitle": "Movies API test should get a list of Movies",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  var i;\n  for (i = 0; i < 3; i++) {\n    switch (i) {\n      case 0:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 1:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/trending/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 2:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/upcoming').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n    }\n  }\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "3aca919e-bf74-4134-adae-e90beecd5d7c",
              "parentUUID": "97f27a07-1885-4325-95f6-a0b776b4b1af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific movie",
              "fullTitle": "Movies API test should get a specific movie",
              "timedOut": false,
              "duration": 326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "def74a28-4ca2-451d-b65f-e1125100f46e",
              "parentUUID": "97f27a07-1885-4325-95f6-a0b776b4b1af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to movies without valid token",
              "fullTitle": "Movies API test should prevent access to movies without valid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/movies').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "f2a6b9b6-5300-46af-aa9c-3617f0ac623c",
              "parentUUID": "97f27a07-1885-4325-95f6-a0b776b4b1af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a movies reviews",
              "fullTitle": "Movies API test should get a movies reviews",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/reviews/').set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      res.body.results[0].should.have.property('author');\n      res.body.results[0].should.have.property('content');\n      done();\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "14282692-a3b3-4ca9-9fcc-cded82711206",
              "parentUUID": "97f27a07-1885-4325-95f6-a0b776b4b1af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new movie review",
              "fullTitle": "Movies API test should add a new movie review",
              "timedOut": false,
              "duration": 299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    (0, _supertest2.default)(_index.app).post('/api/movies/' + _common2.default.movie.id + '/reviews/').send(_common2.default.review).set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/reviews').set('Authorization', token).then(function (res) {\n        res.body.results[res.body.results.length - 1].should.have.property('author').equal(_common2.default.review.author);\n        res.body.results[res.body.results.length - 1].should.have.property('content').equal(_common2.default.review.content);\n        done();\n      });\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "5af68ce4-ca1b-44b1-9f27-bf304600ad4e",
              "parentUUID": "97f27a07-1885-4325-95f6-a0b776b4b1af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3aca919e-bf74-4134-adae-e90beecd5d7c",
            "def74a28-4ca2-451d-b65f-e1125100f46e",
            "f2a6b9b6-5300-46af-aa9c-3617f0ac623c",
            "14282692-a3b3-4ca9-9fcc-cded82711206",
            "5af68ce4-ca1b-44b1-9f27-bf304600ad4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "dce37890-6224-4309-b404-31ab7b4fad13",
          "title": "TvShows API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testTvApi.js",
          "file": "/tests/testTvApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "TvShows API test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\ndone();\n// userModel.create(testUser).then(result => done()).catch(err => done(err))",
              "err": {},
              "uuid": "e38342dc-1be1-4744-b900-7b69bf461e9b",
              "parentUUID": "dce37890-6224-4309-b404-31ab7b4fad13",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Tv Shows",
              "fullTitle": "TvShows API test should get a list of Tv Shows",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  var i;\n  for (i = 0; i < 2; i++) {\n    switch (i) {\n      case 0:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/tvShows/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 1:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/tvShows/trending/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n    }\n  }\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "2e425fdb-184e-4003-8520-d3481f94d760",
              "parentUUID": "dce37890-6224-4309-b404-31ab7b4fad13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific Tv Show",
              "fullTitle": "TvShows API test should get a specific Tv Show",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "dc299c13-7db8-422e-a9cd-09ed954dff7e",
              "parentUUID": "dce37890-6224-4309-b404-31ab7b4fad13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to tv shows without valid token",
              "fullTitle": "TvShows API test should prevent access to tv shows without valid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/tvShows').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "ff3b2ce1-6e7f-41e0-95f9-ef9855d8671b",
              "parentUUID": "dce37890-6224-4309-b404-31ab7b4fad13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a tv shows reviews",
              "fullTitle": "TvShows API test should get a tv shows reviews",
              "timedOut": false,
              "duration": 266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/reviews/').set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      res.body.results[0].should.have.property('author');\n      res.body.results[0].should.have.property('content');\n      done();\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "e8917517-d987-4825-bc9c-cf6b6f0e8121",
              "parentUUID": "dce37890-6224-4309-b404-31ab7b4fad13",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new tv show review",
              "fullTitle": "TvShows API test should add a new tv show review",
              "timedOut": false,
              "duration": 267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    (0, _supertest2.default)(_index.app).post('/api/tvShows/' + _common2.default.tvShow.id + '/reviews/').send(_common2.default.review).set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/reviews').set('Authorization', token).then(function (res) {\n        res.body.results[res.body.results.length - 1].should.have.property('author').equal(_common2.default.review.author);\n        res.body.results[res.body.results.length - 1].should.have.property('content').equal(_common2.default.review.content);\n        done();\n      });\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "44c18e91-78a3-465d-a656-eb0c1b9b755c",
              "parentUUID": "dce37890-6224-4309-b404-31ab7b4fad13",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e425fdb-184e-4003-8520-d3481f94d760",
            "dc299c13-7db8-422e-a9cd-09ed954dff7e",
            "ff3b2ce1-6e7f-41e0-95f9-ef9855d8671b",
            "e8917517-d987-4825-bc9c-cf6b6f0e8121",
            "44c18e91-78a3-465d-a656-eb0c1b9b755c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 997,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
          "title": "Users API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testUsersApi.js",
          "file": "/tests/testUsersApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users API test \"before all\" hook",
              "timedOut": false,
              "duration": 173,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user2';\ntestUser.password = 'test2';\ninvalidUser.username = 'chancer1';\ninvalidUser.password = 'bad1';\nupdatedUser.username = testUser.username, updatedUser.password = \"newpassword\";\n_userModel2.default.create(testUser).then(function (result) {\n    return done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "afe7665a-316c-4a81-bcae-9c92e7f6cd88",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a user",
              "fullTitle": "Users API test should register a user",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n            username: \"frankx\",\n            password: \"apassword\"\n        };\n        (0, _supertest2.default)(_index.app).post('/api/users').send(newUser).query({\n            action: 'register'\n        }).expect('Content-type', /json/).expect(201) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "2540d7a1-91b0-4a42-827f-61e7603e234d",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user token for valid user",
              "fullTitle": "Users API test should return a user token for valid user",
              "timedOut": false,
              "duration": 175,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n.then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.success.should.be.true;\n    res.body.token.should.exist;\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "487d49ec-4eab-445c-807f-c496de9fd3f3",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return a token for invalid user",
              "fullTitle": "Users API test should not return a token for invalid user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(invalidUser).expect('Content-type', /json/).expect(401) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 401\n            res.should.have.property('status').equal(401);\n            _should2.default.not.exist(res.body.token);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "17c5a11b-ee3f-4bc9-a571-3cba05d040ea",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should change the password of a valid user",
              "fullTitle": "Users API test should change the password of a valid user",
              "timedOut": false,
              "duration": 525,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + testUser.username).send(updatedUser).then(function (res) {\n                // HTTP status should be 200\n                // console.log(res.body)\n                res.should.have.property('status').equal(200);\n                (0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n                .then(function (res) {\n                    res.should.have.property('status').equal(200);\n                    res.body.success.should.be.true;\n                    res.body.token.should.exist;\n                    done();\n                });\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "aa3ea9eb-977b-4eeb-b58f-bd328c9a1397",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a movie to user favorites",
              "fullTitle": "Users API test should add a movie to user favorites",
              "timedOut": false,
              "duration": 193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/movies/').send(_common2.default.movie).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.movieFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "e7a56b97-0652-41b8-bc06-a1b5296344eb",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a tvShow to user favorites",
              "fullTitle": "Users API test should add a tvShow to user favorites",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/tv/').send(_common2.default.tvShow).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.tvShowFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "6d4c5bdc-a109-4caa-a753-51efef91491f",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a tvShow from user favorites",
              "fullTitle": "Users API test should remove a tvShow from user favorites",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/tv/' + _common2.default.tvShow.id).send(_common2.default.tvShow).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.tvShowFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "07faba94-b442-445b-93c6-70b6608b659a",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a movie from user favorites",
              "fullTitle": "Users API test should remove a movie from user favorites",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/movies/' + _common2.default.movie.id).send(_common2.default.movie).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.movieFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "4aea8635-d4ad-4b6e-bb4b-e3af8e19c405",
              "parentUUID": "6b971ec4-226d-4f35-a269-0360d6d66f0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2540d7a1-91b0-4a42-827f-61e7603e234d",
            "487d49ec-4eab-445c-807f-c496de9fd3f3",
            "17c5a11b-ee3f-4bc9-a571-3cba05d040ea",
            "aa3ea9eb-977b-4eeb-b58f-bd328c9a1397",
            "e7a56b97-0652-41b8-bc06-a1b5296344eb",
            "6d4c5bdc-a109-4caa-a753-51efef91491f",
            "07faba94-b442-445b-93c6-70b6608b659a",
            "4aea8635-d4ad-4b6e-bb4b-e3af8e19c405"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1639,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}