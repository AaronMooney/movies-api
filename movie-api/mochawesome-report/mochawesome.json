{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-28T18:21:38.808Z",
    "end": "2020-04-28T18:21:41.550Z",
    "duration": 2742,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a62418a7-c021-4a1f-bc9c-3f13d15c24c8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c4dd9265-7939-4496-ad9a-3bc577bea669",
          "title": "Movies API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testMoviesApi.js",
          "file": "/tests/testMoviesApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Movies API test \"before all\" hook",
              "timedOut": false,
              "duration": 536,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n_userModel2.default.create(testUser).then(function (result) {\n  return done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "4e274576-c27c-4727-87fb-eda236393bda",
              "parentUUID": "c4dd9265-7939-4496-ad9a-3bc577bea669",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Movies",
              "fullTitle": "Movies API test should get a list of Movies",
              "timedOut": false,
              "duration": 361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  console.log(res.body);\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    console.log(res.body);\n    res.should.have.property('status').equal(200);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "916bac5d-99d5-404d-b45b-15469d7a7722",
              "parentUUID": "c4dd9265-7939-4496-ad9a-3bc577bea669",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to movies without valid token",
              "fullTitle": "Movies API test should prevent access to movies without valid token",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
              "err": {},
              "uuid": "5d68ca62-7a3f-434f-bd5b-78d6501f8c6c",
              "parentUUID": "c4dd9265-7939-4496-ad9a-3bc577bea669",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "916bac5d-99d5-404d-b45b-15469d7a7722",
            "5d68ca62-7a3f-434f-bd5b-78d6501f8c6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 362,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
          "title": "Users API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testUsersApi.js",
          "file": "/tests/testUsersApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users API test \"before all\" hook",
              "timedOut": false,
              "duration": 174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user2';\ntestUser.password = 'test2';\ninvalidUser.username = 'chancer1';\ninvalidUser.password = 'bad1';\nupdatedUser.username = testUser.username, updatedUser.password = \"newpassword\";\n_userModel2.default.create(testUser).then(function (result) {\n    return done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "8bb0a1b3-6c1d-46bb-a570-178ace6fc378",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a user",
              "fullTitle": "Users API test should register a user",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n            username: \"frankx\",\n            password: \"apassword\"\n        };\n        (0, _supertest2.default)(_index.app).post('/api/users').send(newUser).query({\n            action: 'register'\n        }).expect('Content-type', /json/).expect(201) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "70dfa659-b0ae-4022-9ce0-9f91fe6f4cb4",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user token for valid user",
              "fullTitle": "Users API test should return a user token for valid user",
              "timedOut": false,
              "duration": 175,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n.then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.success.should.be.true;\n    res.body.token.should.exist;\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "0d14cbc4-88aa-40ee-80e2-9cdebe56c758",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return a token for invalid user",
              "fullTitle": "Users API test should not return a token for invalid user",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(invalidUser).expect('Content-type', /json/).expect(401) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 401\n            res.should.have.property('status').equal(401);\n            _should2.default.not.exist(res.body.token);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "ad2dfeaf-9265-4665-9013-6aed75422a6a",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should change the password of a valid user",
              "fullTitle": "Users API test should change the password of a valid user",
              "timedOut": false,
              "duration": 529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + testUser.username).send(updatedUser).then(function (res) {\n                // HTTP status should be 200\n                // console.log(res.body)\n                res.should.have.property('status').equal(200);\n                (0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n                .then(function (res) {\n                    res.should.have.property('status').equal(200);\n                    res.body.success.should.be.true;\n                    res.body.token.should.exist;\n                    done();\n                });\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "208a4255-7fdb-4d4e-82db-de1077cd098f",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a movie to user favorites",
              "fullTitle": "Users API test should add a movie to user favorites",
              "timedOut": false,
              "duration": 198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/movies/').send(_common2.default.movie).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.movieFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "817e754a-db88-4564-bd22-973f32f72d6e",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a tvShow to user favorites",
              "fullTitle": "Users API test should add a tvShow to user favorites",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/tv/').send(_common2.default.tvShow).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.tvShowFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "ca216052-e136-460e-bb7e-ec7ad2697168",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a tvShow from user favorites",
              "fullTitle": "Users API test should remove a tvShow from user favorites",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/tv/' + _common2.default.tvShow.id).send(_common2.default.tvShow).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.tvShowFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "e1364db5-3660-4fdc-83fc-9cfe075ac5f8",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a movie from user favorites",
              "fullTitle": "Users API test should remove a movie from user favorites",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/movies/' + _common2.default.movie.id).send(_common2.default.movie).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.movieFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "1ccddbf0-6137-439a-81cf-549b83c02bfb",
              "parentUUID": "ec7e7a01-b379-4b35-ad75-8c2c34d929ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70dfa659-b0ae-4022-9ce0-9f91fe6f4cb4",
            "0d14cbc4-88aa-40ee-80e2-9cdebe56c758",
            "ad2dfeaf-9265-4665-9013-6aed75422a6a",
            "208a4255-7fdb-4d4e-82db-de1077cd098f",
            "817e754a-db88-4564-bd22-973f32f72d6e",
            "ca216052-e136-460e-bb7e-ec7ad2697168",
            "e1364db5-3660-4fdc-83fc-9cfe075ac5f8",
            "1ccddbf0-6137-439a-81cf-549b83c02bfb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1655,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}