{
  "stats": {
    "suites": 2,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-28T19:35:08.881Z",
    "end": "2020-04-28T19:35:12.371Z",
    "duration": 3490,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2571f457-66b9-437b-b8d0-e7ea13d07470",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e18757f9-4435-428a-a7ab-535258b016f0",
          "title": "Movies API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testMoviesApi.js",
          "file": "/tests/testMoviesApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Movies API test \"before all\" hook",
              "timedOut": false,
              "duration": 525,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n_userModel2.default.create(testUser).then(function (result) {\n  return done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "e0d8f772-bdd2-483b-9035-d7a30e6e0455",
              "parentUUID": "e18757f9-4435-428a-a7ab-535258b016f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Movies",
              "fullTitle": "Movies API test should get a list of Movies",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  var i;\n  for (i = 0; i < 2; i++) {\n    switch (i) {\n      case 0:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 1:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/trending/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 2:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/upcoming').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n    }\n  }\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "24182b5f-a92b-47e1-aa0d-85573c6da8fe",
              "parentUUID": "e18757f9-4435-428a-a7ab-535258b016f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific movie",
              "fullTitle": "Movies API test should get a specific movie",
              "timedOut": false,
              "duration": 319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "9e1ac482-9a41-479b-a6f6-5cd9a62593c6",
              "parentUUID": "e18757f9-4435-428a-a7ab-535258b016f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to movies without valid token",
              "fullTitle": "Movies API test should prevent access to movies without valid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/movies').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "20cb3d5e-a33d-4301-8ba9-4dcd64727e7b",
              "parentUUID": "e18757f9-4435-428a-a7ab-535258b016f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a movies reviews",
              "fullTitle": "Movies API test should get a movies reviews",
              "timedOut": false,
              "duration": 295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/reviews/').set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      res.body.results[0].should.have.property('author');\n      res.body.results[0].should.have.property('content');\n      done();\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "a1dccfa3-4afc-4b34-8c0f-60662eceef76",
              "parentUUID": "e18757f9-4435-428a-a7ab-535258b016f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new movie review",
              "fullTitle": "Movies API test should add a new movie review",
              "timedOut": false,
              "duration": 300,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    (0, _supertest2.default)(_index.app).post('/api/movies/' + _common2.default.movie.id + '/reviews/').send(_common2.default.review).set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/reviews').set('Authorization', token).then(function (res) {\n        res.body.results[res.body.results.length - 1].should.have.property('author').equal(_common2.default.review.author);\n        res.body.results[res.body.results.length - 1].should.have.property('content').equal(_common2.default.review.content);\n        done();\n      });\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "e58f421e-bd49-40ca-9128-6e3664bf4ca7",
              "parentUUID": "e18757f9-4435-428a-a7ab-535258b016f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24182b5f-a92b-47e1-aa0d-85573c6da8fe",
            "9e1ac482-9a41-479b-a6f6-5cd9a62593c6",
            "20cb3d5e-a33d-4301-8ba9-4dcd64727e7b",
            "a1dccfa3-4afc-4b34-8c0f-60662eceef76",
            "e58f421e-bd49-40ca-9128-6e3664bf4ca7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
          "title": "Users API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testUsersApi.js",
          "file": "/tests/testUsersApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users API test \"before all\" hook",
              "timedOut": false,
              "duration": 172,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user2';\ntestUser.password = 'test2';\ninvalidUser.username = 'chancer1';\ninvalidUser.password = 'bad1';\nupdatedUser.username = testUser.username, updatedUser.password = \"newpassword\";\n_userModel2.default.create(testUser).then(function (result) {\n    return done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "6cf24107-5789-4705-8746-5f3d6af9200b",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a user",
              "fullTitle": "Users API test should register a user",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n            username: \"frankx\",\n            password: \"apassword\"\n        };\n        (0, _supertest2.default)(_index.app).post('/api/users').send(newUser).query({\n            action: 'register'\n        }).expect('Content-type', /json/).expect(201) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "46e694f3-ff87-4366-81cd-3e3dba02dfbd",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user token for valid user",
              "fullTitle": "Users API test should return a user token for valid user",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n.then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.success.should.be.true;\n    res.body.token.should.exist;\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "16b64e02-24f0-4c34-97ae-11ec88f91320",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return a token for invalid user",
              "fullTitle": "Users API test should not return a token for invalid user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(invalidUser).expect('Content-type', /json/).expect(401) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 401\n            res.should.have.property('status').equal(401);\n            _should2.default.not.exist(res.body.token);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "bdc8d6d5-3b36-40bd-9c2a-98ca3e6bbbea",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should change the password of a valid user",
              "fullTitle": "Users API test should change the password of a valid user",
              "timedOut": false,
              "duration": 525,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + testUser.username).send(updatedUser).then(function (res) {\n                // HTTP status should be 200\n                // console.log(res.body)\n                res.should.have.property('status').equal(200);\n                (0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n                .then(function (res) {\n                    res.should.have.property('status').equal(200);\n                    res.body.success.should.be.true;\n                    res.body.token.should.exist;\n                    done();\n                });\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "2ae322bb-fdb7-4817-a544-158c454e3d2d",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a movie to user favorites",
              "fullTitle": "Users API test should add a movie to user favorites",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/movies/').send(_common2.default.movie).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.movieFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "f3d7ca9f-0c5f-4125-b7ba-d7dd0c65a68d",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a tvShow to user favorites",
              "fullTitle": "Users API test should add a tvShow to user favorites",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/tv/').send(_common2.default.tvShow).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.tvShowFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "6d870576-fb9e-4f6b-8787-3c1a4120dfea",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a tvShow from user favorites",
              "fullTitle": "Users API test should remove a tvShow from user favorites",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/tv/' + _common2.default.tvShow.id).send(_common2.default.tvShow).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.tvShowFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "53c3109a-07dc-4e8a-a105-80fb70b7d21c",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a movie from user favorites",
              "fullTitle": "Users API test should remove a movie from user favorites",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/movies/' + _common2.default.movie.id).send(_common2.default.movie).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.movieFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "260ace90-7996-4a11-9645-559554b593dc",
              "parentUUID": "200ec814-3fba-488e-ba83-63ed6ed7e5f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46e694f3-ff87-4366-81cd-3e3dba02dfbd",
            "16b64e02-24f0-4c34-97ae-11ec88f91320",
            "bdc8d6d5-3b36-40bd-9c2a-98ca3e6bbbea",
            "2ae322bb-fdb7-4817-a544-158c454e3d2d",
            "f3d7ca9f-0c5f-4125-b7ba-d7dd0c65a68d",
            "6d870576-fb9e-4f6b-8787-3c1a4120dfea",
            "53c3109a-07dc-4e8a-a105-80fb70b7d21c",
            "260ace90-7996-4a11-9645-559554b593dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1642,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}