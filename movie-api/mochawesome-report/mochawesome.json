{
  "stats": {
    "suites": 5,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-28T20:28:12.333Z",
    "end": "2020-04-28T20:28:18.106Z",
    "duration": 5773,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ac295c7f-cf1a-45d9-ae56-96ca60e23c94",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e8a24839-60cf-4e59-a7b7-c2c1e310ea1e",
          "title": "Genres API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testGenresApi.js",
          "file": "/tests/testGenresApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Genres API test \"before all\" hook",
              "timedOut": false,
              "duration": 613,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n_userModel2.default.create(testUser).then(function (result) {\n  return done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "2f16bc55-026c-4831-a3b4-79d606108410",
              "parentUUID": "e8a24839-60cf-4e59-a7b7-c2c1e310ea1e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Genres",
              "fullTitle": "Genres API test should get a list of Genres",
              "timedOut": false,
              "duration": 380,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/genres/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "f197492d-42b1-4c2e-bf22-5b0f21ec9533",
              "parentUUID": "e8a24839-60cf-4e59-a7b7-c2c1e310ea1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to People without valid token",
              "fullTitle": "Genres API test should prevent access to People without valid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/genres/').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "ff4ed85e-54b7-4509-9886-9b7fd244e0f8",
              "parentUUID": "e8a24839-60cf-4e59-a7b7-c2c1e310ea1e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f197492d-42b1-4c2e-bf22-5b0f21ec9533",
            "ff4ed85e-54b7-4509-9886-9b7fd244e0f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 384,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "7c0ad230-963d-47ed-aa6f-e9e9c344224b",
          "title": "Movies API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testMoviesApi.js",
          "file": "/tests/testMoviesApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Movies API test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\ndone();",
              "err": {},
              "uuid": "6e353385-e2f5-4856-9941-52189422e536",
              "parentUUID": "7c0ad230-963d-47ed-aa6f-e9e9c344224b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Movies",
              "fullTitle": "Movies API test should get a list of Movies",
              "timedOut": false,
              "duration": 181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  var i;\n  for (i = 0; i < 3; i++) {\n    switch (i) {\n      case 0:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 1:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/trending/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 2:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/upcoming').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n    }\n  }\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "49a088eb-47ec-40b7-918a-c0aa30e6ae5e",
              "parentUUID": "7c0ad230-963d-47ed-aa6f-e9e9c344224b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific movie",
              "fullTitle": "Movies API test should get a specific movie",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "caa38dd1-6e2f-4067-a8b9-3f977c7a3d0c",
              "parentUUID": "7c0ad230-963d-47ed-aa6f-e9e9c344224b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to movies without valid token",
              "fullTitle": "Movies API test should prevent access to movies without valid token",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/movies').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "b0916a33-fe90-4b43-9cd4-4248de284ff6",
              "parentUUID": "7c0ad230-963d-47ed-aa6f-e9e9c344224b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a movies reviews",
              "fullTitle": "Movies API test should get a movies reviews",
              "timedOut": false,
              "duration": 309,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/reviews/').set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      res.body.results[0].should.have.property('author');\n      res.body.results[0].should.have.property('content');\n      done();\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "47fdcdba-0a69-43af-8947-d8fc5d6b759c",
              "parentUUID": "7c0ad230-963d-47ed-aa6f-e9e9c344224b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new movie review",
              "fullTitle": "Movies API test should add a new movie review",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    (0, _supertest2.default)(_index.app).post('/api/movies/' + _common2.default.movie.id + '/reviews/').send(_common2.default.review).set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/reviews').set('Authorization', token).then(function (res) {\n        res.body.results[res.body.results.length - 1].should.have.property('author').equal(_common2.default.review.author);\n        res.body.results[res.body.results.length - 1].should.have.property('content').equal(_common2.default.review.content);\n        done();\n      });\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "448e59d8-e1b5-4c9f-8c22-0bc6b4c116f3",
              "parentUUID": "7c0ad230-963d-47ed-aa6f-e9e9c344224b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "49a088eb-47ec-40b7-918a-c0aa30e6ae5e",
            "caa38dd1-6e2f-4067-a8b9-3f977c7a3d0c",
            "b0916a33-fe90-4b43-9cd4-4248de284ff6",
            "47fdcdba-0a69-43af-8947-d8fc5d6b759c",
            "448e59d8-e1b5-4c9f-8c22-0bc6b4c116f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "554ba038-ab2f-4dd3-b273-27f5634305b4",
          "title": "Person API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testPersonApi.js",
          "file": "/tests/testPersonApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Person API test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\ndone();",
              "err": {},
              "uuid": "c887f714-b397-421f-a850-22726400b28e",
              "parentUUID": "554ba038-ab2f-4dd3-b273-27f5634305b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of People",
              "fullTitle": "Person API test should get a list of People",
              "timedOut": false,
              "duration": 278,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/person/popular/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "c8892aac-5750-443a-a976-f94b5d951556",
              "parentUUID": "554ba038-ab2f-4dd3-b273-27f5634305b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific person",
              "fullTitle": "Person API test should get a specific person",
              "timedOut": false,
              "duration": 270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/person/' + _common2.default.person.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.person.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "d9fb3c1e-13a9-4ba6-b000-031b07bbf263",
              "parentUUID": "554ba038-ab2f-4dd3-b273-27f5634305b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to People without valid token",
              "fullTitle": "Person API test should prevent access to People without valid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/person/popular/').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "98e5c4cf-d741-4791-8cc0-5ce93a69cfcb",
              "parentUUID": "554ba038-ab2f-4dd3-b273-27f5634305b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a persons credits",
              "fullTitle": "Person API test should get a persons credits",
              "timedOut": false,
              "duration": 270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/person/credits/' + _common2.default.person.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.person.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "4261d5c9-7dd2-4d68-9a10-9939543de761",
              "parentUUID": "554ba038-ab2f-4dd3-b273-27f5634305b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8892aac-5750-443a-a976-f94b5d951556",
            "d9fb3c1e-13a9-4ba6-b000-031b07bbf263",
            "98e5c4cf-d741-4791-8cc0-5ce93a69cfcb",
            "4261d5c9-7dd2-4d68-9a10-9939543de761"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 820,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "019d7f07-3b4c-46ea-ae90-cb4622592f42",
          "title": "TvShows API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testTvApi.js",
          "file": "/tests/testTvApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "TvShows API test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\ndone();",
              "err": {},
              "uuid": "e41398ed-8c2b-4102-8e95-962f5b061a02",
              "parentUUID": "019d7f07-3b4c-46ea-ae90-cb4622592f42",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Tv Shows",
              "fullTitle": "TvShows API test should get a list of Tv Shows",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  var i;\n  for (i = 0; i < 2; i++) {\n    switch (i) {\n      case 0:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/tvShows/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 1:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/tvShows/trending/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n    }\n  }\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "901f5300-811b-48ae-84e1-27bda348d566",
              "parentUUID": "019d7f07-3b4c-46ea-ae90-cb4622592f42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific Tv Show",
              "fullTitle": "TvShows API test should get a specific Tv Show",
              "timedOut": false,
              "duration": 286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "2ebf8187-d25b-45e0-9091-266b2cc13b19",
              "parentUUID": "019d7f07-3b4c-46ea-ae90-cb4622592f42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to tv shows without valid token",
              "fullTitle": "TvShows API test should prevent access to tv shows without valid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/tvShows').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "004eb127-59d1-4f1b-b5fe-fdb6532f4545",
              "parentUUID": "019d7f07-3b4c-46ea-ae90-cb4622592f42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a tv shows reviews",
              "fullTitle": "TvShows API test should get a tv shows reviews",
              "timedOut": false,
              "duration": 274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/reviews/').set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      res.body.results[0].should.have.property('author');\n      res.body.results[0].should.have.property('content');\n      done();\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "68a888f9-bb7c-4ff0-afb6-6dcc2b009265",
              "parentUUID": "019d7f07-3b4c-46ea-ae90-cb4622592f42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new tv show review",
              "fullTitle": "TvShows API test should add a new tv show review",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    (0, _supertest2.default)(_index.app).post('/api/tvShows/' + _common2.default.tvShow.id + '/reviews/').send(_common2.default.review).set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/reviews').set('Authorization', token).then(function (res) {\n        res.body.results[res.body.results.length - 1].should.have.property('author').equal(_common2.default.review.author);\n        res.body.results[res.body.results.length - 1].should.have.property('content').equal(_common2.default.review.content);\n        done();\n      });\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "05f14ddd-63fb-49c3-8dd9-0d26f3c92d88",
              "parentUUID": "019d7f07-3b4c-46ea-ae90-cb4622592f42",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "901f5300-811b-48ae-84e1-27bda348d566",
            "2ebf8187-d25b-45e0-9091-266b2cc13b19",
            "004eb127-59d1-4f1b-b5fe-fdb6532f4545",
            "68a888f9-bb7c-4ff0-afb6-6dcc2b009265",
            "05f14ddd-63fb-49c3-8dd9-0d26f3c92d88"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1014,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
          "title": "Users API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testUsersApi.js",
          "file": "/tests/testUsersApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users API test \"before all\" hook",
              "timedOut": false,
              "duration": 173,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user2';\ntestUser.password = 'test2';\ninvalidUser.username = 'chancer1';\ninvalidUser.password = 'bad1';\nupdatedUser.username = testUser.username, updatedUser.password = \"newpassword\";\n_userModel2.default.create(testUser).then(function (result) {\n    return done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "255ab58b-6eb2-4911-b876-910b81b36242",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a user",
              "fullTitle": "Users API test should register a user",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n            username: \"frankx\",\n            password: \"apassword\"\n        };\n        (0, _supertest2.default)(_index.app).post('/api/users').send(newUser).query({\n            action: 'register'\n        }).expect('Content-type', /json/).expect(201) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "a7a56200-e516-4bd0-a939-250cf20a757d",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user token for valid user",
              "fullTitle": "Users API test should return a user token for valid user",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n.then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.success.should.be.true;\n    res.body.token.should.exist;\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "ffbcf4c5-ca9a-468f-af07-d0b8c38e65f7",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return a token for invalid user",
              "fullTitle": "Users API test should not return a token for invalid user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(invalidUser).expect('Content-type', /json/).expect(401) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 401\n            res.should.have.property('status').equal(401);\n            _should2.default.not.exist(res.body.token);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "3d441d07-7482-43f4-9853-8815a9fb081c",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should change the password of a valid user",
              "fullTitle": "Users API test should change the password of a valid user",
              "timedOut": false,
              "duration": 529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + testUser.username).send(updatedUser).then(function (res) {\n                // HTTP status should be 200\n                // console.log(res.body)\n                res.should.have.property('status').equal(200);\n                (0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n                .then(function (res) {\n                    res.should.have.property('status').equal(200);\n                    res.body.success.should.be.true;\n                    res.body.token.should.exist;\n                    done();\n                });\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "3793d9f4-8dbf-486f-a7fa-cfd2df2e25fd",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a movie to user favorites",
              "fullTitle": "Users API test should add a movie to user favorites",
              "timedOut": false,
              "duration": 191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/movies/').send(_common2.default.movie).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.movieFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "4dc8309c-233f-43fc-b465-64c24963bbef",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a tvShow to user favorites",
              "fullTitle": "Users API test should add a tvShow to user favorites",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/tv/').send(_common2.default.tvShow).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.tvShowFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "74a52aa4-5b2f-4a48-a39a-96e51a59140e",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a tvShow from user favorites",
              "fullTitle": "Users API test should remove a tvShow from user favorites",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/tv/' + _common2.default.tvShow.id).send(_common2.default.tvShow).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.tvShowFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "89bba731-1379-423c-a7c7-3ab959a93f94",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a movie from user favorites",
              "fullTitle": "Users API test should remove a movie from user favorites",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/movies/' + _common2.default.movie.id).send(_common2.default.movie).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.movieFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "f98c0437-c2f7-40f6-992b-6f05fc505b93",
              "parentUUID": "c78b615e-e2a2-4dfe-b710-4a20ec40bfce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7a56200-e516-4bd0-a939-250cf20a757d",
            "ffbcf4c5-ca9a-468f-af07-d0b8c38e65f7",
            "3d441d07-7482-43f4-9853-8815a9fb081c",
            "3793d9f4-8dbf-486f-a7fa-cfd2df2e25fd",
            "4dc8309c-233f-43fc-b465-64c24963bbef",
            "74a52aa4-5b2f-4a48-a39a-96e51a59140e",
            "89bba731-1379-423c-a7c7-3ab959a93f94",
            "f98c0437-c2f7-40f6-992b-6f05fc505b93"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1634,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}