{
  "stats": {
    "suites": 5,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2020-04-28T20:08:25.697Z",
    "end": "2020-04-28T20:08:31.402Z",
    "duration": 5705,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aba7d9f0-3ddd-4ce2-bbf9-69c2e38c9cb4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "55e3f4fd-a8e7-4453-ad68-52e805a109ce",
          "title": "Genres API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testGenresApi.js",
          "file": "/tests/testGenresApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Genres API test \"before all\" hook",
              "timedOut": false,
              "duration": 519,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\n_userModel2.default.create(testUser).then(function (result) {\n  return done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "4624cce8-4c2c-4a58-b9ec-2fe4d21992ce",
              "parentUUID": "55e3f4fd-a8e7-4453-ad68-52e805a109ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Genres",
              "fullTitle": "Genres API test should get a list of Genres",
              "timedOut": false,
              "duration": 337,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/genres/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "6c4fc63c-0fcf-42e9-8a99-22f8a1e15d9d",
              "parentUUID": "55e3f4fd-a8e7-4453-ad68-52e805a109ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to People without valid token",
              "fullTitle": "Genres API test should prevent access to People without valid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/genres/').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "6b7d5cf8-2e01-48bd-af02-a3dfa3fb14bc",
              "parentUUID": "55e3f4fd-a8e7-4453-ad68-52e805a109ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c4fc63c-0fcf-42e9-8a99-22f8a1e15d9d",
            "6b7d5cf8-2e01-48bd-af02-a3dfa3fb14bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 341,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "2d201391-82f1-4153-9890-65bf277e72ad",
          "title": "Movies API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testMoviesApi.js",
          "file": "/tests/testMoviesApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Movies API test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\ndone();",
              "err": {},
              "uuid": "be8b1a55-a041-4d8f-9704-32f07025391c",
              "parentUUID": "2d201391-82f1-4153-9890-65bf277e72ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Movies",
              "fullTitle": "Movies API test should get a list of Movies",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  var i;\n  for (i = 0; i < 3; i++) {\n    switch (i) {\n      case 0:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 1:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/trending/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 2:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/movies/upcoming').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n    }\n  }\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "aecea77f-4197-45d7-91be-544d236444c8",
              "parentUUID": "2d201391-82f1-4153-9890-65bf277e72ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific movie",
              "fullTitle": "Movies API test should get a specific movie",
              "timedOut": false,
              "duration": 299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "89dab98a-e0fc-4f3b-9a17-688c5a01fcdb",
              "parentUUID": "2d201391-82f1-4153-9890-65bf277e72ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to movies without valid token",
              "fullTitle": "Movies API test should prevent access to movies without valid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/movies').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "72858ca3-2814-4bb0-a87d-f5bcfa0e2368",
              "parentUUID": "2d201391-82f1-4153-9890-65bf277e72ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a movies reviews",
              "fullTitle": "Movies API test should get a movies reviews",
              "timedOut": false,
              "duration": 305,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/reviews/').set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      res.body.results[0].should.have.property('author');\n      res.body.results[0].should.have.property('content');\n      done();\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "7ee82d2c-f510-4abe-96d5-053760ca18ad",
              "parentUUID": "2d201391-82f1-4153-9890-65bf277e72ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new movie review",
              "fullTitle": "Movies API test should add a new movie review",
              "timedOut": false,
              "duration": 319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.movie.id);\n    (0, _supertest2.default)(_index.app).post('/api/movies/' + _common2.default.movie.id + '/reviews/').send(_common2.default.review).set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      (0, _supertest2.default)(_index.app).get('/api/movies/' + _common2.default.movie.id + '/reviews').set('Authorization', token).then(function (res) {\n        res.body.results[res.body.results.length - 1].should.have.property('author').equal(_common2.default.review.author);\n        res.body.results[res.body.results.length - 1].should.have.property('content').equal(_common2.default.review.content);\n        done();\n      });\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "f7cd8535-6376-47e2-b108-307b93c1a4c9",
              "parentUUID": "2d201391-82f1-4153-9890-65bf277e72ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aecea77f-4197-45d7-91be-544d236444c8",
            "89dab98a-e0fc-4f3b-9a17-688c5a01fcdb",
            "72858ca3-2814-4bb0-a87d-f5bcfa0e2368",
            "7ee82d2c-f510-4abe-96d5-053760ca18ad",
            "f7cd8535-6376-47e2-b108-307b93c1a4c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "cc9375ca-ae1b-48b9-adf2-acac44cd6b80",
          "title": "Person API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testPersonApi.js",
          "file": "/tests/testPersonApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Person API test \"before all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\ndone();",
              "err": {},
              "uuid": "a173542f-9c46-483d-ab11-1a2de43fb01d",
              "parentUUID": "cc9375ca-ae1b-48b9-adf2-acac44cd6b80",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of People",
              "fullTitle": "Person API test should get a list of People",
              "timedOut": false,
              "duration": 269,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/person/popular/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "43ade0c0-322b-4b3b-b8a7-6ed0e2b3b887",
              "parentUUID": "cc9375ca-ae1b-48b9-adf2-acac44cd6b80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific person",
              "fullTitle": "Person API test should get a specific person",
              "timedOut": false,
              "duration": 251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/person/' + _common2.default.person.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.person.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "aa84b8e6-6408-4d97-ab36-8b7c42fba29f",
              "parentUUID": "cc9375ca-ae1b-48b9-adf2-acac44cd6b80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to People without valid token",
              "fullTitle": "Person API test should prevent access to People without valid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/person/popular/').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "81253889-3fe0-4a44-ac53-464dc9a556dc",
              "parentUUID": "cc9375ca-ae1b-48b9-adf2-acac44cd6b80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a persons credits",
              "fullTitle": "Person API test should get a persons credits",
              "timedOut": false,
              "duration": 271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/person/credits/' + _common2.default.person.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.person.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "5432dc2b-4e86-406d-8a3f-fadf3d2ab483",
              "parentUUID": "cc9375ca-ae1b-48b9-adf2-acac44cd6b80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43ade0c0-322b-4b3b-b8a7-6ed0e2b3b887",
            "aa84b8e6-6408-4d97-ab36-8b7c42fba29f",
            "81253889-3fe0-4a44-ac53-464dc9a556dc",
            "5432dc2b-4e86-406d-8a3f-fadf3d2ab483"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 793,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "ec1a22c5-054d-4cac-8b82-c10d077d220b",
          "title": "TvShows API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testTvApi.js",
          "file": "/tests/testTvApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "TvShows API test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user1';\ntestUser.password = 'test1';\ndone();",
              "err": {},
              "uuid": "191693f2-68ba-4c3c-bc83-1777e5912045",
              "parentUUID": "ec1a22c5-054d-4cac-8b82-c10d077d220b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get a list of Tv Shows",
              "fullTitle": "TvShows API test should get a list of Tv Shows",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  var i;\n  for (i = 0; i < 2; i++) {\n    switch (i) {\n      case 0:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/tvShows/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n      case 1:\n        {\n          (0, _supertest2.default)(_index.app).get('/api/tvShows/trending/').set('Authorization', token).then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n          });\n        }\n    }\n  }\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "ae961225-c5be-4f61-9d56-5c24599b51d6",
              "parentUUID": "ec1a22c5-054d-4cac-8b82-c10d077d220b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a specific Tv Show",
              "fullTitle": "TvShows API test should get a specific Tv Show",
              "timedOut": false,
              "duration": 396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id).set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    done();\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "ee1842fe-729c-4a11-916d-9ef29a049c44",
              "parentUUID": "ec1a22c5-054d-4cac-8b82-c10d077d220b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prevent access to tv shows without valid token",
              "fullTitle": "TvShows API test should prevent access to tv shows without valid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).get('/api/tvShows').set('Authorization', badToken).expect(401).then(function (res) {\n  res.should.have.property('status').equal(401);\n  done();\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "d610d465-482b-4fcd-b768-ce5cd740c4ea",
              "parentUUID": "ec1a22c5-054d-4cac-8b82-c10d077d220b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a tv shows reviews",
              "fullTitle": "TvShows API test should get a tv shows reviews",
              "timedOut": false,
              "duration": 270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/reviews/').set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      res.body.results[0].should.have.property('author');\n      res.body.results[0].should.have.property('content');\n      done();\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "73c1a69a-82f7-452c-8659-744ca24f6329",
              "parentUUID": "ec1a22c5-054d-4cac-8b82-c10d077d220b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new tv show review",
              "fullTitle": "TvShows API test should add a new tv show review",
              "timedOut": false,
              "duration": 273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = null;\n(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect(200).then(function (res) {\n  // HTTP status should be 200\n  res.should.have.property('status').equal(200);\n  res.body.should.have.property('success').equal(true);\n  token = res.body.token;\n  (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/').set('Authorization', token).then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id').equal(_common2.default.tvShow.id);\n    (0, _supertest2.default)(_index.app).post('/api/tvShows/' + _common2.default.tvShow.id + '/reviews/').send(_common2.default.review).set('Authorization', token).then(function (res) {\n      // HTTP status should be 200\n      res.should.have.property('status').equal(200);\n      (0, _supertest2.default)(_index.app).get('/api/tvShows/' + _common2.default.tvShow.id + '/reviews').set('Authorization', token).then(function (res) {\n        res.body.results[res.body.results.length - 1].should.have.property('author').equal(_common2.default.review.author);\n        res.body.results[res.body.results.length - 1].should.have.property('content').equal(_common2.default.review.content);\n        done();\n      });\n    });\n  });\n}).catch(function (err) {\n  return done(err);\n});",
              "err": {},
              "uuid": "5f19b488-16be-4072-b6c8-2d9be7aee548",
              "parentUUID": "ec1a22c5-054d-4cac-8b82-c10d077d220b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae961225-c5be-4f61-9d56-5c24599b51d6",
            "ee1842fe-729c-4a11-916d-9ef29a049c44",
            "d610d465-482b-4fcd-b768-ce5cd740c4ea",
            "73c1a69a-82f7-452c-8659-744ca24f6329",
            "5f19b488-16be-4072-b6c8-2d9be7aee548"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
          "title": "Users API test",
          "fullFile": "/Users/admin/College/assignments/assignment2/movie-api/tests/testUsersApi.js",
          "file": "/tests/testUsersApi.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Users API test \"before all\" hook",
              "timedOut": false,
              "duration": 173,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testUser.username = 'user2';\ntestUser.password = 'test2';\ninvalidUser.username = 'chancer1';\ninvalidUser.password = 'bad1';\nupdatedUser.username = testUser.username, updatedUser.password = \"newpassword\";\n_userModel2.default.create(testUser).then(function (result) {\n    return done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "d2ac9932-9c81-4bb8-8762-38e8234b58ff",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a user",
              "fullTitle": "Users API test should register a user",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var newUser = {\n            username: \"frankx\",\n            password: \"apassword\"\n        };\n        (0, _supertest2.default)(_index.app).post('/api/users').send(newUser).query({\n            action: 'register'\n        }).expect('Content-type', /json/).expect(201) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(201);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "88a73cf4-5018-4d4c-a938-8239593fc6dd",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user token for valid user",
              "fullTitle": "Users API test should return a user token for valid user",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n.then(function (res) {\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.success.should.be.true;\n    res.body.token.should.exist;\n    done();\n}).catch(function (err) {\n    return done(err);\n});",
              "err": {},
              "uuid": "aaab1e90-1e0f-4d78-b5c9-883ae9b4b8bd",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return a token for invalid user",
              "fullTitle": "Users API test should not return a token for invalid user",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users').send(invalidUser).expect('Content-type', /json/).expect(401) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 401\n            res.should.have.property('status').equal(401);\n            _should2.default.not.exist(res.body.token);\n            done();\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "0fa24544-41ee-4fd8-9e43-d926f472bcd9",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should change the password of a valid user",
              "fullTitle": "Users API test should change the password of a valid user",
              "timedOut": false,
              "duration": 523,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(testUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + testUser.username).send(updatedUser).then(function (res) {\n                // HTTP status should be 200\n                // console.log(res.body)\n                res.should.have.property('status').equal(200);\n                (0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n                .then(function (res) {\n                    res.should.have.property('status').equal(200);\n                    res.body.success.should.be.true;\n                    res.body.token.should.exist;\n                    done();\n                });\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "d2f3175a-3d2d-4a57-873b-a347fef399d7",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a movie to user favorites",
              "fullTitle": "Users API test should add a movie to user favorites",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/movies/').send(_common2.default.movie).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.movieFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "8eec2eaf-1260-42f0-8ecd-e9f51ffc642f",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a tvShow to user favorites",
              "fullTitle": "Users API test should add a tvShow to user favorites",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).put('/api/users/' + updatedUser.username + '/favorites/tv/').send(_common2.default.tvShow).expect('Content-type', /json/).expect(201) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(201);\n                res.body.tvShowFavorites.should.not.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "174b0b6c-cd89-4557-bce8-c1f9519f30d1",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a tvShow from user favorites",
              "fullTitle": "Users API test should remove a tvShow from user favorites",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/tv/' + _common2.default.tvShow.id).send(_common2.default.tvShow).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.tvShowFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "755fbbe3-2499-4ce5-81e8-4ef7594776d7",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a movie from user favorites",
              "fullTitle": "Users API test should remove a movie from user favorites",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _supertest2.default)(_index.app).post('/api/users/').send(updatedUser).expect('Content-type', /json/).expect(200) // This is the HTTP response\n        .then(function (res) {\n            // HTTP status should be 200\n            res.should.have.property('status').equal(200);\n            res.body.success.should.be.true;\n            res.body.token.should.exist;\n            (0, _supertest2.default)(_index.app).delete('/api/users/' + updatedUser.username + '/favorites/movies/' + _common2.default.movie.id).send(_common2.default.movie).expect('Content-type', /json/).expect(200) // This is the HTTP response\n            .then(function (res) {\n                res.should.have.property('status').equal(200);\n                res.body.movieFavorites.should.be.empty;\n                done();\n            });\n        }).catch(function (err) {\n            return done(err);\n        });",
              "err": {},
              "uuid": "208af536-4e2e-4f02-99ef-5b6431d5a964",
              "parentUUID": "37f6eb51-ae0f-4c7f-b4a7-2dc529a9ffe9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88a73cf4-5018-4d4c-a938-8239593fc6dd",
            "aaab1e90-1e0f-4d78-b5c9-883ae9b4b8bd",
            "0fa24544-41ee-4fd8-9e43-d926f472bcd9",
            "d2f3175a-3d2d-4a57-873b-a347fef399d7",
            "8eec2eaf-1260-42f0-8ecd-e9f51ffc642f",
            "174b0b6c-cd89-4557-bce8-c1f9519f30d1",
            "755fbbe3-2499-4ce5-81e8-4ef7594776d7",
            "208af536-4e2e-4f02-99ef-5b6431d5a964"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1626,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.1.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}